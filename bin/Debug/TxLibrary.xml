<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TxLibrary</name>
    </assembly>
    <members>
        <member name="T:TxLibrary.IO.TxDirectory">
            <summary>
            文件夹操作类
            </summary>
        </member>
        <member name="M:TxLibrary.IO.TxDirectory.CopyDirectory(System.String,System.String)">
            <summary>
            拷贝文件夹
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:TxLibrary.IO.TxFile">
            <summary>
            文件操作类
            </summary>
        </member>
        <member name="M:TxLibrary.IO.TxFile.GetFileName(System.String)">
            <summary>
            通过路径获取文件名称
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:TxLibrary.IO.TxFile.GetFilePath(System.String)">
            <summary>
            获取文件路径
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="T:TxLibrary.IO.TxZip">
            <summary>
            文件压缩类
            </summary>
        </member>
        <member name="M:TxLibrary.IO.TxZip.Zip(System.String,System.String)">
            <summary>
            压缩
            </summary>
            <param name="path"></param>
            <param name="zipPath"></param>
            <returns></returns>
        </member>
        <member name="M:TxLibrary.IO.TxZip.UnZip(System.String,System.String)">
            <summary>
            解压缩
            </summary>
            <param name="zipPath"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:TxLibrary.Log.CLog">
            <summary>
            CLog.xaml 的交互逻辑
            </summary>
            <summary>
            CLog
            </summary>
        </member>
        <member name="T:TxLibrary.Log.CLog.CInfo">
            <summary>
            日志信息
            </summary>
        </member>
        <member name="T:TxLibrary.Log.CLog.CInfo.emType">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="F:TxLibrary.Log.CLog.CInfo.emType.Info">
            <summary>
            信息
            </summary>
        </member>
        <member name="F:TxLibrary.Log.CLog.CInfo.emType.Warning">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:TxLibrary.Log.CLog.CInfo.emType.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="P:TxLibrary.Log.CLog.CInfo.time">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:TxLibrary.Log.CLog.CInfo.type">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="P:TxLibrary.Log.CLog.CInfo.threadID">
            <summary>
            线程ID
            </summary>
        </member>
        <member name="P:TxLibrary.Log.CLog.CInfo.file">
            <summary>
            文件
            </summary>
        </member>
        <member name="P:TxLibrary.Log.CLog.CInfo.line">
            <summary>
            行号
            </summary>
        </member>
        <member name="P:TxLibrary.Log.CLog.CInfo.function">
            <summary>
            函数
            </summary>
        </member>
        <member name="P:TxLibrary.Log.CLog.CInfo.errID">
            <summary>
            错误ID
            </summary>
        </member>
        <member name="P:TxLibrary.Log.CLog.CInfo.description">
            <summary>
            描述信息
            </summary>
        </member>
        <member name="M:TxLibrary.Log.CLog.CInfo.#ctor">
            <summary>
            构造一条空的记录
            </summary>
        </member>
        <member name="M:TxLibrary.Log.CLog.CInfo.#ctor(TxLibrary.Log.CLog.CInfo.emType,System.Int32,System.String)">
            <summary>
            构造一条带数据的记录
            </summary>
            <param name="type"></param>
            <param name="errID"></param>
            <param name="description"></param>
        </member>
        <member name="M:TxLibrary.Log.CLog.CInfo.ToString">
            <summary>
            转换成字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:TxLibrary.Log.CLog.CInfo.Time">
            <summary>
            获取记录时间
            </summary>
        </member>
        <member name="F:TxLibrary.Log.CLog._instance">
            <summary>
            实例对象
            </summary>
        </member>
        <member name="P:TxLibrary.Log.CLog.Instance">
            <summary>
            获取/插件实例对象
            </summary>
        </member>
        <member name="M:TxLibrary.Log.CLog.Release">
            <summary>
            释放对象
            </summary>
        </member>
        <member name="F:TxLibrary.Log.CLog.View">
            <summary>
            视图
            </summary>
        </member>
        <member name="F:TxLibrary.Log.CLog.Logs">
            <summary>
            日志记录集合
            </summary>
        </member>
        <member name="F:TxLibrary.Log.CLog.IsClose">
            <summary>
            控制写Log线程的执行
            </summary>
        </member>
        <member name="P:TxLibrary.Log.CLog.thread">
            <summary>
            线程
            将日志记录写入文件
            </summary>
        </member>
        <member name="F:TxLibrary.Log.CLog.lockWirteLogs">
            <summary>
            记录集合锁
            </summary>
        </member>
        <member name="F:TxLibrary.Log.CLog.wirteLogs">
            <summary>
            记录集合
            </summary>
        </member>
        <member name="M:TxLibrary.Log.CLog.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:TxLibrary.Log.CLog.WriteThread">
            <summary>
            写文件线程方法
            </summary>
        </member>
        <member name="M:TxLibrary.Log.CLog.Add(TxLibrary.Log.CLog.CInfo)">
            <summary>
            添加一条记录
            内部使用，不对外公开
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:TxLibrary.Log.CLog.Info(System.String)">
            <summary>
            添加一条记录信息
            </summary>
            <param name="description"></param>
        </member>
        <member name="M:TxLibrary.Log.CLog.Warning(System.Int32,System.String)">
            <summary>
            添加一条警告信息
            </summary>
            <param name="errID"></param>
            <param name="description"></param>
        </member>
        <member name="M:TxLibrary.Log.CLog.Error(System.Int32,System.String)">
            <summary>
            添加一条错误信息
            </summary>
            <param name="errID"></param>
            <param name="description"></param>
        </member>
        <member name="M:TxLibrary.Log.CLog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:TxLibrary.WPF.TxDelegateCommand">
            <summary>
            委托命令
            </summary>
        </member>
        <member name="T:TxLibrary.WPF.Interface.TxIProperty">
            <summary>
            属性接口
            任何拥有属性的类都建议实现该接口
            </summary>
        </member>
        <member name="M:TxLibrary.WPF.Interface.TxIProperty.NotifyPropertyChanged(System.String)">
            <summary>
            通知属性的值发生了更改
            </summary>
            <param name="property">属性名称</param>
        </member>
        <member name="M:TxLibrary.WPF.Interface.TxIProperty.SetField``1(``0@,``0,System.String)">
            <summary>
            设置字段的值并通知属性的值发生了更改
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target"></param>
            <param name="value"></param>
            <param name="notifyPropertyChanged"></param>
            <returns></returns>
        </member>
        <member name="M:TxLibrary.WPF.Interface.TxIProperty.GetField``1(``0@)">
            <summary>
            获取字段的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:TxLibrary.WPF.TxPropertyBase">
            <summary>
            抽象属性接口
            </summary>
        </member>
        <member name="E:TxLibrary.WPF.TxPropertyBase.PropertyChanged">
            <summary>
            通知属性更改事件
            </summary>
        </member>
        <member name="M:TxLibrary.WPF.TxPropertyBase.NotifyPropertyChanged(System.String)">
            <summary>
            通知属性的值发生了更改
            </summary>
            <param name="property">属性的名称</param>
        </member>
        <member name="M:TxLibrary.WPF.TxPropertyBase.SetField``1(``0@,``0,System.String)">
            <summary>
            设置字段的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target"></param>
            <param name="value"></param>
            <param name="notifyPropertyChanged"></param>
            <returns></returns>
        </member>
        <member name="M:TxLibrary.WPF.TxPropertyBase.GetField``1(``0@)">
            <summary>
            获取字段的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:TxLibrary.WPF.TxPropertyBase.Dispose">
            <summary>
            退出清理
            </summary>
        </member>
        <member name="T:TxLibrary.Config.Page.ButtonPage">
            <summary>
            以分栏的方式分页
            </summary>
            <summary>
            ButtonPage
            </summary>
        </member>
        <member name="M:TxLibrary.Config.Page.ButtonPage.#ctor">
            <summary>
            创建对象
            </summary>
        </member>
        <member name="M:TxLibrary.Config.Page.ButtonPage.AddControl(System.String,System.Windows.FrameworkElement)">
            <summary>
            添加控件
            </summary>
            <param name="name"></param>
            <param name="ctl"></param>
            <returns></returns>
        </member>
        <member name="M:TxLibrary.Config.Page.ButtonPage.LoadWindow">
            <summary>
            加载窗口
            </summary>
            <returns></returns>
        </member>
        <member name="M:TxLibrary.Config.Page.ButtonPage.onButton_Click(System.Object,System.EventArgs)">
            <summary>
            按钮被单击处理方法
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TxLibrary.Config.Page.ButtonPage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:TxLibrary.Config.Page.IPage">
            <summary>
            分页接口
            </summary>
        </member>
        <member name="M:TxLibrary.Config.Page.IPage.AddControl(System.String,System.Windows.FrameworkElement)">
            <summary>
            添加控件
            </summary>
            <param name="name"></param>
            <param name="ctl"></param>
            <returns></returns>
        </member>
        <member name="T:TxLibrary.Config.Page.NotPage">
            <summary>
            不分页
            </summary>
        </member>
        <member name="M:TxLibrary.Config.Page.NotPage.#ctor">
            <summary>
            创建对象
            </summary>
        </member>
        <member name="M:TxLibrary.Config.Page.NotPage.AddControl(System.String,System.Windows.FrameworkElement)">
            <summary>
            添加控件
            </summary>
            <param name="name"></param>
            <param name="ctl"></param>
            <returns></returns>
        </member>
        <member name="T:TxLibrary.Config.Page.TablePage">
            <summary>
            以Table页的方式分页
            </summary>
            <summary>
            TablePage
            </summary>
        </member>
        <member name="M:TxLibrary.Config.Page.TablePage.#ctor">
            <summary>
            创建对象
            </summary>
        </member>
        <member name="M:TxLibrary.Config.Page.TablePage.AddControl(System.String,System.Windows.FrameworkElement)">
            <summary>
            添加控件
            </summary>
            <param name="name"></param>
            <param name="ctl"></param>
            <returns></returns>
        </member>
        <member name="M:TxLibrary.Config.Page.TablePage.LoadWindow">
            <summary>
            加载窗口
            </summary>
            <returns></returns>
        </member>
        <member name="M:TxLibrary.Config.Page.TablePage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:TxLibrary.Config.ISetting">
            <summary>
            参数基类
            </summary>
        </member>
        <member name="M:TxLibrary.Config.ISetting.GetControl(TxLibrary.Config.Page.IPage,System.Boolean,System.Action{System.Object,System.Object},System.Int32,System.Int32,System.Windows.HorizontalAlignment,System.Int32,System.Int32)">
            <summary>
            创建一个控件，该控件与此类的公共属性绑定
            </summary>
            <param name="page">分页方式</param>
            <param name="DescriptionBox">true：当鼠标进入相关参数区域时显示其描述信息</param>
            <param name="ValueChanged">值更改事件</param>
            <param name="Width">控件的宽度</param>
            <param name="Height">控件的高度</param>
            <param name="LabelCtrlTextAlign">参数名称对齐方式</param>
            <param name="LabelCtrlWidth">参数名称宽度</param>
            <param name="ValueCtrlWidth">编辑框宽度</param>
            <returns></returns>
        </member>
        <member name="M:TxLibrary.Config.ISetting.CreateEnumComboBox(System.Reflection.PropertyInfo)">
            <summary>
            创建枚举类型的ComboBox控件
            </summary>
            <param name="propertie"></param>
            <returns></returns>
        </member>
        <member name="M:TxLibrary.Config.ISetting.CreateBoolComboBox(System.Reflection.PropertyInfo)">
            <summary>
            创建Bool类型的ComboBox控件
            </summary>
            <param name="propertie"></param>
            <returns></returns>
        </member>
        <member name="M:TxLibrary.Config.ISetting.CreateNumberTextBox(System.Reflection.PropertyInfo)">
            <summary>
            创建数值类型的编辑框控件
            </summary>
            <param name="propertie"></param>
            <returns></returns>
        </member>
        <member name="M:TxLibrary.Config.ISetting.CreateStringTextBox(System.Reflection.PropertyInfo)">
            <summary>
            创建字符串类型的编辑框控件
            </summary>
            <param name="propertie"></param>
            <returns></returns>
        </member>
        <member name="M:TxLibrary.Config.ISetting.EnumComboBox_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            枚举类型的ComboBox控件选中的项被更改
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TxLibrary.Config.ISetting.BoolComboBox_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            boo类型的ComboBox控件选中的项被更改
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TxLibrary.Config.ISetting.NumberTextBox_TextChanged(System.Object,System.EventArgs)">
            <summary>
            数值类型的编辑框控件的值被更改
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TxLibrary.Config.ISetting.StringTextBox_TextChanged(System.Object,System.EventArgs)">
            <summary>
            字符串类型的编辑框控件的值被更改
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:TxLibrary.Config.API">
            <summary>
            获取鼠标所在位置
            </summary>
        </member>
        <member name="M:TxLibrary.Config.API.GetCursorPos(TxLibrary.Config.API.POINT@)">
            <summary>
            获取鼠标当前所在位置
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="T:TxLibrary.Config.Serialize.BinarySerialize`1">
            <summary>
            二进制序列化存储
            注意：此序列化方法需要被序列化类显示声明SerializableAttribute
            </summary>
        </member>
        <member name="M:TxLibrary.Config.Serialize.BinarySerialize`1.Load(System.String)">
            <summary>
            加载参数
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:TxLibrary.Config.Serialize.BinarySerialize`1.Save(System.String,`0)">
            <summary>
            保存参数
            </summary>
            <param name="file"></param>
            <param name="value"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:TxLibrary.Config.Serialize.ISerialize`1">
            <summary>
            参数存储接口
            </summary>
        </member>
        <member name="M:TxLibrary.Config.Serialize.ISerialize`1.Save(System.String,`0)">
            <summary>
            保存参数
            </summary>
            <param name="file"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TxLibrary.Config.Serialize.ISerialize`1.Load(System.String)">
            <summary>
            加载参数
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="T:TxLibrary.Config.Serialize.JsonSerialize`1">
            <summary>
            以Json格式存储
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TxLibrary.Config.Serialize.JsonSerialize`1.Load(System.String)">
            <summary>
            加载参数
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:TxLibrary.Config.Serialize.JsonSerialize`1.Save(System.String,`0)">
            <summary>
            保存参数
            </summary>
            <param name="file"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:TxLibrary.Config.Serialize.UserDefaultSerialize`1">
            <summary>
            自定义序列化方法
            序列化格式为：参数名称：值
            注意：无法序列化数组类型
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TxLibrary.Config.Serialize.UserDefaultSerialize`1.Load(System.String)">
            <summary>
            加载参数
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:TxLibrary.Config.Serialize.UserDefaultSerialize`1.Save(System.String,`0)">
            <summary>
            保存参数
            </summary>
            <param name="file"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:TxLibrary.Config.Serialize.XmlSerialize`1">
            <summary>
            以XML格式存储
            注意：要存储的对象访问权限必须为public
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TxLibrary.Config.Serialize.XmlSerialize`1.Load(System.String)">
            <summary>
            加载参数
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:TxLibrary.Config.Serialize.XmlSerialize`1.Save(System.String,`0)">
            <summary>
            保存参数
            </summary>
            <param name="file"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:TxLibrary.DesignMode.Single`1">
            <summary>
            单例模板类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TxLibrary.DesignMode.Single`1.GetInstance">
            <summary>
            获取对象实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:TxLibrary.DesignMode.Single`1.GetInstance(System.String,System.String)">
            <summary>
            获取对象实例
            </summary>
            <param name="className">类名（包括名称空间）</param>
            <param name="assemblyPath">程序集名称</param>
            <returns></returns>
        </member>
        <member name="M:TxLibrary.DesignMode.Single`1.Release">
            <summary>
            释放对象实例
            </summary>
        </member>
        <member name="T:TxLibrary.DataStructure.Tree.TxTree">
            <summary>
            树型结构
            </summary>
        </member>
        <member name="P:TxLibrary.DataStructure.Tree.TxTree.Value">
            <summary>
            节点数据
            </summary>
        </member>
        <member name="F:TxLibrary.DataStructure.Tree.TxTree.Father">
            <summary>
            父节点
            </summary>
        </member>
        <member name="F:TxLibrary.DataStructure.Tree.TxTree.Childs">
            <summary>
            子节点
            </summary>
        </member>
        <member name="M:TxLibrary.DataStructure.Tree.TxTree.#ctor(System.Object)">
            <summary>
            创建一个节点
            </summary>
            <param name="_value">节点数据</param>
        </member>
        <member name="P:TxLibrary.DataStructure.Tree.TxTree.GetChilds">
            <summary>
            获取子节点列表
            </summary>
        </member>
        <member name="P:TxLibrary.DataStructure.Tree.TxTree.GetFather">
            <summary>
            获取父节点
            </summary>
        </member>
        <member name="P:TxLibrary.DataStructure.Tree.TxTree.IsRoot">
            <summary>
            判断当前节点是否为根节点
            </summary>
        </member>
        <member name="M:TxLibrary.DataStructure.Tree.TxTree.Add(System.Object)">
            <summary>
            添加节点
            </summary>
            <param name="child">子节点数据</param>
        </member>
        <member name="M:TxLibrary.DataStructure.Tree.TxTree.Add(TxLibrary.DataStructure.Tree.TxTree)">
            <summary>
            添加节点
            新节点添加到Childs，并重置新节点的父亲为本节点
            </summary>
            <param name="tree">子节点</param>
        </member>
        <member name="M:TxLibrary.DataStructure.Tree.TxTree.Remove">
            <summary>
            移除当前节点
            将当前节点的所有子节点添加到父节点，并将所有子节点的父节点重置
            将本节点从父节点中移除
            </summary>
        </member>
        <member name="M:TxLibrary.DataStructure.Tree.TxTree.ToTreeViewItem(TxLibrary.DataStructure.Tree.TxTree)">
            <summary>
            转换到WPF框架的TreeViewItem类型
            </summary>
            <param name="tree"></param>
            <returns></returns>
        </member>
        <member name="M:TxLibrary.DataStructure.Tree.TxTree.ToTreeNode(TxLibrary.DataStructure.Tree.TxTree)">
            <summary>
            转换到WinFrom框架的TreeNode类型
            </summary>
            <param name="tree"></param>
            <returns></returns>
        </member>
        <member name="T:TxLibrary.Threads.TxICommandTask">
            <summary>
            任务接口
            </summary>
        </member>
        <member name="M:TxLibrary.Threads.TxICommandTask.Run">
            <summary>
            任务处理过程
            </summary>
        </member>
        <member name="T:TxLibrary.Threads.TxCommandTask">
            <summary>
            通用任务
            </summary>
        </member>
        <member name="P:TxLibrary.Threads.TxCommandTask.actTask">
            <summary>
            任务
            </summary>
        </member>
        <member name="P:TxLibrary.Threads.TxCommandTask.actTask1">
            <summary>
            带参数的任务
            </summary>
        </member>
        <member name="P:TxLibrary.Threads.TxCommandTask.parameter">
            <summary>
            任务参数
            </summary>
        </member>
        <member name="M:TxLibrary.Threads.TxCommandTask.#ctor(System.Action)">
            <summary>
            创建一个Action任务
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:TxLibrary.Threads.TxCommandTask.#ctor(System.Action{System.Object},System.Object)">
            <summary>
            创建一个Action任务
            </summary>
            <param name="task"></param>
            <param name="param"></param>
        </member>
        <member name="M:TxLibrary.Threads.TxCommandTask.Run">
            <summary>
            任务过程
            </summary>
        </member>
        <member name="T:TxLibrary.Threads.TxTaskThreads">
            <summary>
            多任务线程池
            </summary>
        </member>
        <member name="T:TxLibrary.Threads.TxTaskThreads.EThreadStatus">
            <summary>
            线程状态
            </summary>
        </member>
        <member name="F:TxLibrary.Threads.TxTaskThreads.EThreadStatus.Initialize">
            <summary>
            初始化
            </summary>
        </member>
        <member name="F:TxLibrary.Threads.TxTaskThreads.EThreadStatus.Runing">
            <summary>
            运行中
            </summary>
        </member>
        <member name="F:TxLibrary.Threads.TxTaskThreads.EThreadStatus.WaitTask">
            <summary>
            等待任务
            </summary>
        </member>
        <member name="F:TxLibrary.Threads.TxTaskThreads.objThreadStatusChangedLock">
            <summary>
            线程状态更改锁
            </summary>
        </member>
        <member name="F:TxLibrary.Threads.TxTaskThreads.dictThreadStatus">
            <summary>
            存储线程状态信息
            </summary>
        </member>
        <member name="F:TxLibrary.Threads.TxTaskThreads.nThreadNumber">
            <summary>
            线程数量
            </summary>
        </member>
        <member name="F:TxLibrary.Threads.TxTaskThreads.Threads">
            <summary>
            线程
            </summary>
        </member>
        <member name="F:TxLibrary.Threads.TxTaskThreads.bAbort">
            <summary>
            停止线程
            </summary>
        </member>
        <member name="F:TxLibrary.Threads.TxTaskThreads.mtxTasks">
            <summary>
            任务锁
            </summary>
        </member>
        <member name="F:TxLibrary.Threads.TxTaskThreads.Tasks">
            <summary>
            任务集合
            </summary>
        </member>
        <member name="P:TxLibrary.Threads.TxTaskThreads.ThreadCount">
            <summary>
            线程数量
            </summary>
        </member>
        <member name="P:TxLibrary.Threads.TxTaskThreads.TaskCount">
            <summary>
            任务数量
            </summary>
        </member>
        <member name="M:TxLibrary.Threads.TxTaskThreads.#ctor">
            <summary>
            创建线程池
            </summary>
        </member>
        <member name="M:TxLibrary.Threads.TxTaskThreads.Init(System.Int32)">
            <summary>
            初始化
            </summary>
            <param name="threadNumber">线程数量</param>
            <returns></returns>
        </member>
        <member name="M:TxLibrary.Threads.TxTaskThreads.Uninit">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:TxLibrary.Threads.TxTaskThreads.AppendTask(TxLibrary.Threads.TxICommandTask)">
            <summary>
            添加一个任务
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:TxLibrary.Threads.TxTaskThreads.WaitAllTasks(System.Int32)">
            <summary>
            等待所有任务执行完毕
            </summary>
            <param name="timeout">超时时间, 0：一直等待</param>
            <returns>超时返回false；成功返回true</returns>
        </member>
        <member name="M:TxLibrary.Threads.TxTaskThreads.Process">
            <summary>
            线程池执行过程
            </summary>
        </member>
        <member name="M:TxLibrary.Threads.TxTaskThreads.SetThreadStatus(System.Threading.Thread,TxLibrary.Threads.TxTaskThreads.EThreadStatus)">
            <summary>
            设置线程状态
            </summary>
            <param name="thread"></param>
            <param name="status"></param>
        </member>
        <member name="T:TxLibrary.Notification.NotificationHandler">
            <summary>
            通知
            </summary>
            <param name="notification"></param>
            <param name="args"></param>
        </member>
        <member name="T:TxLibrary.Notification.TxNotification">
            <summary>
            通知机制
            </summary>
        </member>
        <member name="E:TxLibrary.Notification.TxNotification.NotificationEvent">
            <summary>
            接收通知的事件
            </summary>
        </member>
        <member name="P:TxLibrary.Notification.TxNotification.Instance">
            <summary>
            单例设计模式，返回自身
            </summary>
        </member>
        <member name="M:TxLibrary.Notification.TxNotification.SendNotification(TxLibrary.Notification.TxNotification.Notification,System.Object[])">
            <summary>
            同步发送通知
            </summary>
            <param name="notification"></param>
            <param name="args"></param>
        </member>
        <member name="M:TxLibrary.Notification.TxNotification.SendAsyncNotification(TxLibrary.Notification.TxNotification.Notification,System.Object[])">
            <summary>
            异步发送通知
            </summary>
            <param name="notification"></param>
            <param name="args"></param>
        </member>
        <member name="T:TxLibrary.Notification.TxNotification.Notification">
            <summary>
            通知类型
            </summary>
        </member>
        <member name="F:TxLibrary.Notification.TxNotification.Notification.Initialize">
            <summary>
            初始化
            </summary>
        </member>
        <member name="F:TxLibrary.Notification.TxNotification.Notification.Open">
            <summary>
            打开
            </summary>
        </member>
        <member name="F:TxLibrary.Notification.TxNotification.Notification.Close">
            <summary>
            关闭
            </summary>
        </member>
    </members>
</doc>
